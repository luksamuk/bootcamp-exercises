#+TITLE: Notas Módulo 2
#+AUTHOR: Lucas S. Vieira
#+EMAIL: lucasvieira@protonmail.com
#+PROPERTY: header-args :eval no
#+STARTUP: content

* Introdução

Aqui iniciaremos o desenvolvimento do GoBarber.

Começamos iniciando um novo projeto com o yarn.

* Dependências

Utilizaremos praticamente só o Express.

* Estrutura

Separaremos os arquivos de código em =src/=.

Em =src/=, teremos os arquivos

- =routes.js=: Rotas do servidor. Tomamos um ~Router~ do Express para
  tal.
- =app.js=: Importa as rotas e cria uma definição de classe ~App~, que
  inicializa um servidor Express com suas demais rotas e
  middlewares. Exporta o servidor Express (existente em uma instância)
  em si.
- =server.js=: Toma o servidor Express anterior e inicia a escuta na
  porta ~3333~.

** Motivo para uso da estrutura

Esta estrutura é benéfica posteriormente para testes unitários
(funcionais, integração, etc). Por este motivo, a própria escuta do
servidor é inicializada /fora da classe/ do aplicativo em si -- algo
desnecessário nos testes.

* Nodemon & Sucrase

Sucrase insere algumas funcionalidades recentes de JavaScript ao
Node.js. É similar a Babel/Babel Node.

#+begin_src bash
yarn add sucrase nodemon -D
#+end_src

O Sucrase permite que transformemos

#+begin_src js
const express    = require('express');
const { Router } = require('express');

const routes = new Router();

...

module.exports = routes;
#+end_src

em

#+begin_src js
import express from 'express';
import { Router } from 'express';

const routes = new Router();

...

export default routes;
#+end_src

Para executar com o Sucrase, podemos utilizar este comando:

#+begin_src bash
yarn sucrase-node src/server.js
#+end_src

Precisaremos configurar o Nodemon para que utilize o Sucrase.

Primeiramente, é essencial que adicionemos um script para executarmos
o Nodemon a partir do Yarn, em =package.json=:

#+begin_src json
{
    "scripts": {
	"server": "nodemon src/server.js"
    },
}
#+end_src

Em seguida, criaremos um arquivo =nodemon.json= para a configuração do
Nodemon, a fim de que utilize o Sucrase. Este arquivo conterá o
seguinte:

#+begin_src json
{
    "execMap": {
	"js": "node -r sucrase/register"
    }
}
#+end_src

Isto fará com que o Node /registre/ o arquivo com o Sucrase antes de
executá-lo, para que a sintaxe seja validada.

Neste momento, executar =yarn server= será o suficiente para testarmos
nosso servidor.

* Docker

Docker é utilizado para a criação de /ambientes isolados/, também
conhecidos como /contêineres/.

Contêineres expõem portas de comunicação que podemos utilizar
externamente.

/Imagens/ do Docker são ferramentas e tecnologias que podemos colocar em
contêineres. Portanto, contêineres são /instâncias de imagens/.

Imagens podem facilmente ser encontradas no DockerHub (Docker
Registry). Para tanto, criamos /receitas/ de imagens, salvas em arquivos
=Dockerfile=.

Abaixo, temos um exemplo de Dockerfile.

#+begin_src dockerfile
# Partindo de uma imagem existente
FROM node:10

# Pasta da aplicação no contêiner
WORKDIR /usr/app

# Cópia dos arquivos
COPY . ./

# Instalação das dependências (via Yarn)
RUN yarn

# Exposição da porta do serviço
EXPOSE 3333

# Execução da aplicação
CMD yarn server
#+end_src

** Usando PostgreSQL pelo Docker

Vamos usar a imagem Docker do [[https://hub.docker.com/_/postgres][PostgreSQL]]. É importante ler as
instruções de uso deste contêiner para instanciamento do PostgreSQL e
outras informações.

Usaremos este comando:

#+begin_src bash
docker run --name database -e POSTGRES_PASSWORD=docker -p 5432:5432 -d postgres:11
#+end_src

Destrinchando-o, saberemos alguns parâmetros interessantes:

- =--name database=: Define o nome para o contêiner. Útil para separar
  contêineres e poder referenciá-los. O nome será ~database~, neste
  caso.
- ~-e POSTGRES_PASSWORD=docker~: ~-e~ define variáveis de ambiente; neste
  caso, apenas ~POSTGRES_PASSWORD~.
- ~-p 5432:5432~: Realiza um redirecionamento de porta. No caso, isto
  define que a porta ~5432~ do computador (a primeira) seja
  redirecionada para a porta ~5432~ do contêiner (a segunda).
- ~-d postgres:11~: Este parâmetro define o nome da imagem. O sufixo ~:11~
  especifica uma versão específica para esta imagem.

Para verificar a saúde de execução dos contêineres, basta executarmos
o comando:

#+begin_src bash
docker ps
#+end_src

Isto listará todos os contêineres ativos na máquina.

** Testando se o PostgreSQL está funcionando

Podemos utilizar o [[https://www.electronjs.org/apps/postbird][Postbird]] para acessarmos o Postgres. Basta
utilizarmos o username =postgres= e a senha =docker=, como anteriormente
definidos. Lá, clicamos em *Save & Connect*.

Ali, criamos também uma nova base de dados, chamada =gobarber=. Para
tanto, basta selecionar /Create Database.../ na caixa /Select
database/. Não é necessário usar templates, e a codificação poderá
continuar como UTF-8.

As tabelas do banco de dados serão criados pela aplicação, então nada
precisaremos fazer a mais.

*** Nota aleatória

Eu tinha 33 contêineres aqui que não serviam pra absolutamente nada, e
eles estavam lotando a saída do meu =docker ps -a= (que lista todos os
contêineres na máquina). Então, eu excluí eles a partir da saída desse
comando:

#+begin_src bash
docker ps -a | tail -n 33 | awk '{print $NF}' | xargs -n33 -t docker rm
#+end_src

Só uma curiosidade interessante, mesmo.

** Controlando o contêiner

Para parar o contêiner, podemos usar o comando:

#+begin_src bash
docker stop database
#+end_src

É interessante ressaltar que o contêiner será parado de forma brusca
mediante reinicialização, também.

Para reiniciar o contêiner, utilizamos:

#+begin_src bash
docker start database
#+end_src

Para vermos informações de execução ou erro do contêiner, podemos
utilizar:

#+begin_src bash
docker logs database
#+end_src

É interessante lembrar que esta configuração não foi criada de forma a
permitir que um banco de dados só responda a uma aplicação, porém este
seria o curso recomendado para tal; desta forma, outros bancos de
dados não poderiam ser afetados pela aplicação atual.

* Sequelize & MVC

** Sequelize

/Sequelize/ é um ORM para Node.js para bancos de dados relacionais, e
funciona com MySQL, PostgreSQL, SQLite, etc.

/ORM/ é uma forma de abstração de bancos de dados. As tabelas do banco
de dados viram *models*.

A ideia do ORM é utilizar apenas a linguagem-base, sem o uso de SQL.

Assim, um código SQL como:

#+begin_src sql
INSERT INTO users (name, email)
       VALUES (
           "Fulano",
	     "fulano@exemplo.com")
#+end_src

torna-se código JavaScript similar a:

#+begin_src js
User.create({
    name:  "Fulano",
    email: "fulano@exemplo.com",
});
#+end_src

Em uma busca de dados, um código SQL como:

#+begin_src sql
SELECT * FROM users
WHERE email = "fulano@exemplo.com"
LIMIT 1
#+end_src

torna-se um código JavaScript similar a:

#+begin_src js
User.findOne({
    where: {
	email: "fulano@exemplo.com",
    }
});
#+end_src

** Migrations

*Migrations* são um /controle de versão/ para bases de dados. Assim, a
 base de dados mantém-se atualizada entre os desenvolvedores de um
 projeto, e entre os ambientes de /desenvolvimento/ e /produção/.

Cada arquivo da /migration/ contém instruções de criação, alteração ou
remoção de tabelas e colunas. A ordenação destes arquivos ocorre por
data. Assim, uma /migration/ não pode depender de uma /migration/ no
futuro.

É uma boa prática minimizar o gerenciamento de tabelas por migration
(ex., uma tabela por migration).

Podemos utilizar o próprio /Sequelize/ para migrations.

Uma migration instrui como *criar* uma tabela (método /up/) e como
realizar *rollback* (método /down/).

Após uma migration ser repassada para outros desenvolvedores e/ou para
o ambiente de produção, *JAMAIS MODIFIQUE* esta migration. Caso
necessário, crie *outra migration*.

** Seeds

*Seeds* são dados fictícios para popular a base de dados para
 desenvolvimento, particularmente úteis em testes.

Seeds são executáveis apenas por código, e jamais devem ser utilizados
em produção; caso os dados de alguma seed precise ir para produção, as
próprias /migrations/ podem manipular estes dados nas tabelas.

** Arquitetura MVC

É uma forma de estruturar as pastas e arquivos da aplicação,
estruturando as responsabilidades de cada tipo de arquivo. Aqui,
possuímos três agentes principais:

- *Model*: Armazena as abstrações do BD. Usado para manipular os dados
  nas tabelas. Não possui responsabilidade sobre a regra de negócio da
  aplicação (ex: o Model não envia um e-mail de boas-vindas na
  operação de cadastro).
- *Controller*: Ponto de entrada das requisições da
  aplicação. Normalmente, uma rota está associada com um método do
  Controller. Inclui a grande parte das regras de negócio da
  aplicação (conforme a aplicação cresce, poderemos isolar estas
  regras).
- *View*: Retorno ao cliente. Em aplicações não-REST, poderia ser um
  HTML; no nosso caso, é apenas um JSON retornado ao front-end, que
  posteriormente será manipulado por ReactJS ou React Native.

*** Face de um Controller

É uma classe. Sempre retorna um JSON (tanto para sucesso quanto para
erro), e nunca invoca outro Controller (método).

Criamos um novo Controller quando tivermos uma nova /entidade/ -- o que
não é o mesmo que um Model, mas cada Model normalmente possui seu
próprio Controller. Todavia, um Controller pode não possuir Model
associado. Ex: em uma aplicação com /autenticação/, podemos ter um
=SessionController= para o usuário autenticado, o que não seria um
=UserController=, que estaria associado ao Model =User=.

Um Controller possui *no máximo cinco métodos*. Mais métodos que esses
indicam que estamos falando de /outra entidade/. Os métodos são:

- *index*;
- *show*;
- *store*;
- *update*;
- *delete*.

Como exemplo, vejamos um modelo de Controller para um User de um BD,
bem como suas funcionalidades assumidas:

#+begin_src js
class UserController
{
    // Listagem de usuários
    index() {}

    // Exibir um único usuário
    show() {}

    // Cadastrar usuário
    store() {}

    // Alterar usuário
    update() {}

    // Remover usuário
    delete() {}
}
#+end_src

* ESLint, Prettier e EditorConfig

** ESLint

Vamos adicionar o =eslint= às dependências de desenvolvimento e
selecionaremos o padrão de código Airbnb.

#+begin_src bash
yarn add eslint -D
#+end_src

Após esta operação, executaremos o ESLint pelo console. Basta então
seguir o passo a passo.

#+begin_src bash
yarn eslint --init
#+end_src

1. =To check syntax, find problems, and enforce code style=;
2. =JavaScript modules=;
3. Frameworks: =None of these=;
4. Sem suporte a TypeScript;
5. Desselecionar =Browser= com barra de espaço, selecionar =Node=;
6. =Use a popular style guide= e selecionar Airbnb;
7. Formato de configuração: =JavaScript=;

Instale as dependências com =npm= como requisitado. Porém, logo em
seguida, isto criará um arquivo =package-lock.json=; delete-o, e
execute:

#+begin_src bash
yarn
#+end_src

Isto adicionará as dependências ao =yarn.lock=.

Um arquivo =.eslintrc.js= será criado. Ali, faremos as alterações de
estilo.

No VSCode, é necessário ter a extensão ESLint. No Emacs, podemos usar
=flymake-eslint=, mas isto exige que o =eslint= esteja instalado
globalmente via =npm= (o que não é um problema...).

Pessoalmente, em ="rules"=, eu coloquei...

#+begin_src json
{
    "indent": ["error", 4],
}
#+end_src

...porque eu sou o maluco da indentação com quatro espaços.

No VSCode, é possível configurar o =eslint= para que formate o código no
salvamento. Eu não gosto desse tipo de coisa! Então eu pesquisei o que
fazer para consertar isso manualmente, via console. Basta executar:

#+begin_src bash
yarn eslint --fix src/arquivo.js
#+end_src

*** Regras extras

Algumas regras extras sugeridas. Coloque-as no elemento ="rules"=:

#+begin_src json
{
    "class-method-use-this": "off",
}
#+end_src

Remove o reforço do uso da keyword =this= nos métodos de uma classe.

#+begin_src json
{
    "no-param-reassign": "off",
}
#+end_src

Permite realizar alterações em um parâmetro recebido.

#+begin_src json
{
    "camelcase": "off",
}
#+end_src

Desabilita a exigência de CamelCase para variáveis.

#+begin_src json
{
    "no-unused-vars": ["error", { "argsIgnorePattern": "next" }],
}
#+end_src

Dispensa o uso de variáveis utilizadas apenas para variáveis chamadas
=next=. Útil em alguns /middlewares/, onde não for utilizado o callback
=next=.

** Prettier

O Prettier ajuda a embelezar o código (ex. linhas muito grandes), e
integra com o ESLint. Vamos instalá-lo:

#+begin_src bash
yarn add prettier eslint-config-prettier eslint-plugin-prettier -D
#+end_src

Vamos ao =.eslintrc.js= novamente. Ali, transforme o campo ="extends"= em
um /array/ e adicione ='prettier'= como segundo parâmetro do
/array/. Adicionalmente, declare uma propriedade ="plugins"= e insira
='prettier'= também.

Por fim, adicione a regra:

#+begin_src json
{
    "prettier/prettier": "error",
}
#+end_src

Vamos sobrescrever algumas regras, criando um arquivo
=.prettierrc=. Vejamos:

#+begin_src json
{
    "singleQuote":   true,
    "trailingComma": "es5",
}
#+end_src

Como eu sou o doido dos quatro espaços de indentação, adiciono estas
propriedades:

#+begin_src json
{
    "tabWidth": 4,
    "useTabs":  false,
}
#+end_src

** ESLint automático em um diretório

Para executar o ESLint em todos os arquivos .js do diretório =src/=:

#+begin_src bash
yarn eslint --fix src --ext .js
#+end_src

O ESLint tentará consertar automaticamente tudo o que puder nos
códigos JavaScript de =src/=.

** [VSCode apenas] EditorConfig

Essa extensão do VSCode garante que todos os editores estejam
configurados da mesma forma.

Isso é meio balela, mas vou colocar aqui o conteúdo do meu
=.editorconfig= que criei manualmente:

#+begin_src fundamental
root = true

[*]
indent_style = space
indent_size  = 4
charset      = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
#+end_src

* Configurando o Sequelize

Começamos criando os diretórios:

- =src/config=: Armazena configurações, ex. configurações de conexão com
  o BD.
- =src/database=: Arquivos relacionados ao BD.
- =src/database/migrations=: Arquivos de /migrations/ do BD.
- =src/app=: Códigos de regras de negócios, lógica, etc. Ex: Controllers
  e Models.
- =src/app/controllers=: Controllers.
- =src/app/models=: Models.

Criamos, um arquivo =src/config/database.js=. Neste arquivo,
armazenaremos as credenciais para acessarmos o banco de dados.

Finalmente, adicionamos o Sequelize ao projeto:

#+begin_src bash
yarn add sequelize
#+end_src

Também instalamos uma ferramenta extra para o Sequelize em momento de
desenvolvimento. Esta ferramenta facilita a interação com o Sequelize,
bem como a criação de /migrations/ e outros atributos relacionados ao
banco de dados.

#+begin_src bash
yarn add sequelize-cli -D
#+end_src

Agora, criamos um arquivo =.sequelizerc= na raiz do diretório. Este
arquivo possui a sintaxe de JS, e informará ao Sequelize a estrutura
de projetos que acabamos de criar. Ademais, este arquivo não aceita a
sintaxe ~import~ / ~export~. Neste arquivo, inseriremos:

#+begin_src js
// -*- mode: rjsx -*-
const { resolve } = require('path');

module.exports = {
    config: resolve(__dirname, 'src', 'config', 'database.js'),
    'models-path': resolve(__dirname, 'src', 'app', 'models'),
    'migrations-path': resolve(__dirname, 'src', 'database', 'migrations'),
    'seeders-path': resolve(__dirname, 'src', 'database', 'seeds'),
};
#+end_src

Retornando a =config/database.js=, também exportaremos um objeto, desta
vez também com a sintaxe de CommonJS.

Pela [[https://sequelize.org/v5/manual/dialects.html][Documentação do Sequelize]], há vários dialetos de bancos de dados
que podemos utilizar. Aqui, utilizaremos PostgreSQL. Assim, é
necessário instalar as seguintes dependências:

#+begin_src bash
yarn add pg pg-hstore
#+end_src

No arquivo, informamos o /dialeto/ utilizado, as credenciais, o banco de
dados a ser utilizado na aplicação (previamente criado), e então
realizamos algumas definições:

- =timestamps: true=: Garante a criação de colunas de /timestamps/
  automática (=created_at=, =updated_at=) para armazenar dados de criação e
  atualização de cada registro.
- =underscored: true=, =underscoredAll: true=: Padroniza os nomes de
  tabelas e colunas com um padrão ~snake_case~ ao invés de ~camelCase~.

O arquivo, na íntegra, ficará desta forma:

#+begin_src js
module.exports = {
    dialect: 'postgres',
    host: 'localhost',
    username: 'postgres',
    password: 'docker',
    database: 'gobarber',
    define: {
        timestamps: true,
        underscored: true,
        underscoredAll: true,
    },
};
#+end_src

* Migration de usuário

Criaremos nossa primeira /migration/ para criarmos a tabela de usuários
da aplicação.

Podemos automatizar esse processo usando o =sequelize-cli=. Por ser uma
migration que /cria/ a tabela de usuários, damos a ela o nome
=create-users=:

#+begin_src bash
yarn sequelize migration:create --name=create-users
#+end_src

Em =src/database/migrations=, um arquivo será criado.

Abrindo o arquivo, des-comente o exemplo para os métodos =up= e =down=. Em
=down=, como não vamos utilizar o parâmetro =Sequelize=, podemos
removê-lo; de resto, confie no =eslint=.

Também configuramos, no método =up=, os seguintes campos:

- =id=: Inteiro, não permite valores nulos, auto-incremental, chave
  primária.
- =name=: String, não permite valores nulos.
- =email=: String, não permite valores nulos, único.
- =password_hash=: String, não permite valores nulos.
- =provider=: Booleano, não permite valores nulos, valor padrão
  =FALSE=. Diz respeito ao provedor, que pode ser um   /cliente/ ou um
  /prestador de serviços/ da aplicação; para um prestador de serviços,
  este campo valerá =TRUE=.
- =created_at=, =updated_at=: Date, não permite valores nulos.

Abaixo, temos o estado do código do método =up=.

#+begin_src js
(queryInterface, Sequelize) => {
    return queryInterface.createTable('users', {
        id: {
            type: Sequelize.INTEGER,
            allowNull: false,
            autoIncrement: true,
            primaryKey: true,
        },
        name: {
            type: Sequelize.STRING,
            allowNull: false,
        },
        email: {
            type: Sequelize.STRING,
            allowNull: false,
            unique: true,
        },
        password_hash: {
            type: Sequelize.STRING,
            allowNull: false,
        },
        provider: {
            type: Sequelize.BOOLEAN,
            defaultValue: false,
            allowNull: false,
        },
        created_at: {
            type: Sequelize.DATE,
            allowNull: false,
        },
        updated_at: {
            type: Sequelize.DATE,
            allowNull: false,
        },
    });
}
#+end_src

** Executando a migration

Para executarmos a migration, basta utilizarmos o seguinte comando:

#+begin_src bash
yarn sequelize db:migrate
#+end_src

Para desfazer a última /migration/, basta executar o comando:

#+begin_src bash
yarn sequelize db:migrate:undo
#+end_src

Para desfazer *todas* as migrations:

#+begin_src bash
yarn sequelize db:migrate:undo:all
#+end_src

* Model de usuário

Em =src/app/models=, crie um novo arquivo chamado =User.js=.

Neste arquivo, vamos tomar os elementos =Sequelize= e =Model= da
biblioteca =sequelize=, e criaremos uma classe =User= que extende
=Model=. Nesta classe, criaremos um método estático =init=, que invocará
=super.init=. Desta forma:

#+begin_src js
import Sequelize, { Model } from 'sequelize';

class User extends Model {
    static init(sequelize) {
        super.init(
            {
                name: Sequelize.STRING,
                email: Sequelize.STRING,
                password_hash: Sequelize.STRING,
                provider: Sequelize.BOOLEAN,
            },
            {
                sequelize,
            }
        );
    }
}

export default User;
#+end_src

Nesta invocação, passaremos dois objetos como valores. O primeiro
objeto institui todas as colunas da tabela, e destaca os tipos de cada
coluna. 

O segundo objeto exige que passemos adiante o parâmetro =sequelize=, e
também pode ser utilizado para outras configurações como modificar o
tome da tabela, /collate/, /charset/, etc.

* Criando carregador de Models

Criaremos um arquivo =src/database/index.js=. Neste arquivo,
realizaremos a conexão com o banco de dados e carregaremos os /models/.

Neste arquivo, criamos uma classe =Database=, que estabelece a conexão
com o banco de dados e carrega cada um dos /models/ da aplicação.

#+begin_src js
import Sequelize from 'sequelize';

import User from '../app/models/User';

import databaseConfig from '../config/database';

const models = [User];

class Database {
    constructor() {
        this.init();
    }

    init() {
        this.connection = new Sequelize(databaseConfig);
        models.forEach(model => model.init(this.connection));
    }
}

export default new Database();
#+end_src

Este módulo será chamado em =app.js=. Basta importar o módulo com:

#+begin_src js
import './database';
#+end_src

Não será necessário tomar o retorno desta importação. Neste momento, a
conexão com o banco de dados já terá sido estabelecida, e os modelos
terão sido carregados.

** Testando

Em =routes.js=, importamos o modelo de usuário. Podemos testar o modelo
na rota previamente criada (=GET /=). Para tanto, tornamos a função da
rota assíncrona (palavra-chave =async=), uma vez que precisaremos
utilizar um =await= para todas as operações que serão realizadas no
banco de dados. A rota ficaria dessa forma:

#+begin_src js
routes.get('/', async (req, res) => {
    const user = await User.createcom ({
        name: 'Fulano de Tal',
        email: 'fulano@exemplo.com',
        password_hash: '12341234123',
    });
    return res.json(user);
});
#+end_src

Veja que =User.create= cria um usuário propriamente dito no banco de
dados. Como essa operação precisa ser /assíncrona/, utilizamos a
palavra-chave =await= para esperar pela resposta do banco de dados, que
pode ser um pouco demorada.

Basta então lançar o servidor e dar um =GET= request em =localhost:3333=.

Por padrão, durante o desenvolvimento, o Sequelize mostra o log das
queries executadas no console, sem os valores:

#+begin_src text
Executing (default): INSERT INTO "users" ("id","name","email","password_hash","cre
ated_at","updated_at") VALUES (DEFAULT,$1,$2,$3,$4,$5) RETURNING *;    
#+end_src

A aba /Content/ do Postbird também pode ser utilizada para verificar se
os dados foram criados.

* Cadastro de usuários

Criaremos o arquivo =src/app/controllers/UserController.js=. Aqui, só
precisaremos criar uma classe =UserController=, e exportar uma instância
da mesma por padrão. Ademais, criamos um método assíncrono chamado
=store=, que possui a mesma face de um /middleware/ do Express (recebendo
uma /requisição/ e um callback de /resposta/). Esta função também
retornará alguma resposta em JSON. Ficamos, por enquanto, com um
código como o listado a seguir.

#+begin_src js
import User from '../models/User';

class UserController {
    async store(req, res) {
        return res.json();
    }
}

export default new UserController();
#+end_src

A criação em si do usuário é uma operação assíncrona (por ser
relacionada ao banco de dados), e podemos consumir todo o corpo da
requisição diretamente, pois o /model/ de usuário já define os campos a
serem consumidos na requisição. Por fim, retornamos o usuário
cadastrado na resposta:

#+begin_src js
async store(req, res) {
    const user = await User.create(req.body);
    return res.json(user);
}
#+end_src

Retornando às rotas, podemos importar o /controller/ de usuário;
removemos a rota para testes anteriormente utilizada, e então
criaremos uma rota do tipo =POST= para cadastro; também podemos remover
a dependência do /model/ de usuário:

#+begin_src js
routes.post('/users', UserController.store);
#+end_src

Podemos testar esta rota com uma requisição =POST= através do Insomnia.

O =UserController= não realiza verificações quanto a e-mails
duplicados. Para tanto, precisamos verificar, no método =store=, se um
usuário com tal email já não existe:

#+begin_src js
const userExists = await User.findOne({
    where: { email: req.body.email },
});

if (userExists) {
    return res.status(400).json({ error: 'User already exists' });
}
#+end_src

Finalmente, é ideal que retornemos ao frontend apenas os campos do
usuário que julgamos necessários. Façamos as alterações em =store=:

#+begin_src js
const { id, name, email, provider } = await User.create(req.body);
return res.json({
    id,
    name,
    email,
    provider,
});
#+end_src

* Gerando hash da senha

Ao invés de esperarmos que o usuário envie seu =password_hash=,
esperaremos por uma senha em um campo =password=, e então geraremos
remotamente o /hash/ desta senha, que será então armazenado em banco de
dados.

Para tanto, utilizaremos uma implementação de =bcrypt= para Node:

#+begin_src js
yarn add bcryptjs
#+end_src

No /Model/ de usuário, importaremos o =bcrypt=, e então criaremos um novo
campo =password= no Model, de tipo =VIRTUAL=. Veja que estes campos não
precisam ser um reflexo dos dados que estão sendo preenchidos no banco
de dados; ademais, campos de tipo =VIRTUAL= são campos que não deverão
existir na base de dados.

Após a chamada a =super.init=, chamemos =this.addHook= para adicionar um
/hook/ ao processo de criação do usuário, antes do salvamento na base de
dados. Hooks são clausuras executadas automaticamente, baseadas em
ações que ocorrem no /model/.

Neste hook, recebemos o usuário como parâmetro, e preencheremos
=password_hash=, com base em =password=. Este preenchimento baseia-se numa
geração de hash em oito /rounds/. Vejamos o código final:

#+begin_src js
static init(sequelize) {
    super.init(
        {
            name: Sequelize.STRING,
            email: Sequelize.STRING,
            password: Sequelize.VIRTUAL,
            password_hash: Sequelize.STRING,
            provider: Sequelize.BOOLEAN,
        },
        {
            sequelize,
        }
    );

    this.addHook('beforeSave', async user => {
        if (user.password) {
            user.password_hash = await bcrypt.hash(user.password, 8);
        }
    });

    return this;
}
#+end_src

*NOTA:* Tenho a impressão de que temos um problema de segurança
 aqui. Pela forma como o sistema foi projetado, passar =password_hash=
 sem fornecer =password= parece dar a possibilidade de manipularmos o
 hash da senha na hora do cadastro. Talvez seja legal consertar isso
 posteriormente! Vou deixar anotado no código para me lembrar.

* Conceitos de JWT

JSON Web Token, ou JWT, é um tipo de método para autenticação em serviços
REST. A ideia é criarmos uma rota capaz de ouvir um método =POST=, onde
poderíamos receber o =email= e a =password= de um usuário, por exemplo. A
partir daí, o serviço consulta a base de dados, da forma como for
necessário, e então gera um /token JWT/.

Este token é composto de três partes, separadas por pontos:

- *Headers*: Informações que definem o tipo de token gerado. Não muito
  relevante para o serviço em si;
- *Payload*: Informações não-sensíveis do usuário autenticado (ex: ID,
  nome, e-mail...);
- *Assinatura*: Um /checksum/. Garante que o token não foi modificado
  externamente.

** Autenticação JWT

Começaremos criando um Controller chamado =SessionController=. É
interessante lembrar que este /controller/ cria uma *Sessão*, e não um
*Usuário*; sendo estas duas entidades diferentes, é essencial que
tenhamos /controllers/ diferentes para cada uma, ainda que apenas
usuários possam se autenticar. Ademais, um /controller/ só pode possuir
um método =store=; mesmo que forçássemos esta operação no /controller/ de
usuário, não seria possível recriar este método.

Também importaremos o /model/ de usuário e instalaremos uma nova
biblioteca para lidarmos com JWT:

#+begin_src bash
yarn add jsonwebtoken
#+end_src

Também importaremos o JWT:

#+begin_src js
import jwt from 'jsonwebtoken';
#+end_src

No método assíncrono =store=, tomaremos o =email= e a =senha= do corpo da
requisição. Verificamos, em seguida, se existe um usuário com aquele
email.

#+begin_src js
const { email, password } = req.body;

const user = await User.findOne({ where: { email } });

if(!user) {
    return res.status(401).json({ error: 'User not found' });
}
#+end_src

Caso a execução prossiga, resta verificar se a senha do usuário é a
mesma informada. Para tanto, voltaremos ao /model/ de usuário e
criaremos *nele* a verificação para a senha do usuário. Isto pode ser
ali feito uma vez que não se trata de uma regra de negócio. Faremos,
então, um método para a classe =User=:

#+begin_src js
checkPassword(password) {
    return bcrypt.compare(password, this.password_hash);
}
#+end_src

De volta ao =SessionController=, realizamos tal comparação, como
necessário. Veja que a comparação exige o uso de =await=, uma vez que a
comparação de hash é assíncrona.

#+begin_src js
if (!(await user.checkPassword(password))) {
    return res.status(401).json({ error: 'Password does not match' });
}
#+end_src

Agora, tomamos o =id= e o =name= do usuário, que serão retornados no
token (isto é arbitrário), e então retornamos os dados de usuário e o
token prometido, através do JWT.

Para /assinar/ o token, enviamos três elementos. O primeiro é o *payload*,
sendo o mesmo um objeto JSON, aqui contendo apenas o =id= do usuário. O
segundo é uma *string única* contendo uma /chave secreta/ para a
aplicação.

*NOTA*: Existem muitas formas de gerar esta chave. No curso, utiliza-se
o MD5 de uma certa string; pessoalmente, eu utilizarei o comando...

#+begin_src bash
openssl rand -base64 27
#+end_src

...para gerar uma chave randômica de alguns caracteres.

A melhor alternativa provavelmente seria usar o programa =openssl= para
gerar um esquema de chave pública e privada, com um algoritmo mais
seguro. Mas não precisamos complicar isto agora. [[https://stackoverflow.com/questions/50943739/how-do-i-get-a-key-for-jsonwebtoken-secret][Este link]] parece
possuir informações com um direcionamento relevante.

O terceiro parâmetro seria um objeto, com alguns parâmetros para o
/token/. Isto envolve uma data de expiração, por exemplo.

Abaixo, o fragmento de código em questão:

#+begin_src js
const { id, name } = user;

return res.json({
    user: {
        id,
        name,
        email,
    },
    token: jwt.sign({ id }, 'lRVIWIcw63yvytynhbmTmzE66w6YDYLW3rE0', {
        expiresIn: '7d',
    }),
});
#+end_src

** Definindo a rota de sessão

Vamos agora ao arquivo de rotas, e definimos uma rota que aceita um
método =POST= para autenticação:

#+begin_src js
routes.post('/sessions', SessionController.store);
#+end_src

Podemos testar esta rota, agora, no Insomnia, com uma requisição =POST=
para =/sessions=, onde o corpo será apenas um JSON com os campos =email= e
=password=.

** Separação da chave secreta e da expiração

Criaremos um arquivo =src/config/auth.js=, onde colocaremos as
informações de chave secreta e de expiração de token JWT:

#+begin_src js
export default {
    secret: 'lRVIWIcw63yvytynhbmTmzE66w6YDYLW3rE0',
    expiresIn: '7d',
};
#+end_src

Finalmente, em =SessionController=, importaremos a configuração como
módulo e atualizamos o retorno em JSON mediante sucesso.

#+begin_src js
return res.json({
    user: {
        id,
        name,
        email,
    },
    token: jwt.sign({ id }, authConfig.secret, {
        expiresIn: authConfig.expiresIn,
    }),
});
#+end_src
